version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    container_name: zookeeper
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    hostname: localhost
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=localhost
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CREATE_TOPIC="entry:1:3"
    networks:
      - backend
    links:
      - zookeeper
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'parking_lot'
      MYSQL_USER: 'root'
      MYSQL_PASSWORD: 'root'
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_HOST: localhost
    ports:
      - '3307:3307'
    expose:
      - '3307'
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - backend
  
  app-server:
    # Configuration for building the docker image for the backend service
    image: parking-app-server
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
      - kafka
      - zookeeper
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/parking_lot?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - backend
    links:
      - kafka
      
# Names our volume
volumes:
  my-db:
  
# Networks to be created to facilitate communication between containers
networks:
  backend:
    driver: bridge